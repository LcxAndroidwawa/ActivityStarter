import org.gradle.internal.jvm.Jvm

buildscript {
  ext.kotlin_version = '1.0.6'

  repositories {
    mavenCentral()
  }

  dependencies {
    classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }

  repositories {
    mavenCentral()
  }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.dcendents.android-maven'

group='com.github.marcinmoskala'

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion

  defaultConfig {
    minSdkVersion rootProject.ext.minSdkVersion

    consumerProguardFiles 'proguard-rules.txt'

    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
  }

  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
    test.java.srcDirs += 'src/test/kotlin'
  }
}

dependencies {
  compile project(':activitystarter-annotations')
  compile deps.supportAnnotations
  compile deps.supportCompat
  compile 'com.android.support:appcompat-v7:25.1.0'
  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

  androidTestCompile deps.junit
  androidTestCompile deps.truth
  androidTestCompile deps.supportTestRunner

  testCompile deps.junit
  testCompile deps.truth
  testCompile deps.compiletesting
  testCompile files(getRuntimeJar())
  testCompile files(Jvm.current().getToolsJar())
  testCompile project(':activitystarter-compiler')
  testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
  compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
}

def getRuntimeJar() {
  try {
    final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile();
    File runtimeJar = new File(javaBase, "lib/rt.jar");
    if (runtimeJar.exists()) {
      return runtimeJar;
    }
    runtimeJar = new File(javaBase, "jre/lib/rt.jar");
    return runtimeJar.exists() ? runtimeJar : null;
  } catch (IOException e) {
    throw new RuntimeException(e);
  }
}

// Fancy test print
tasks.withType(Test) {
  testLogging {
    // set options for log level LIFECYCLE
    events "passed", "skipped", "failed", "standardOut"
    showExceptions true
    exceptionFormat "full"
    showCauses true
    showStackTraces true

    // set options for log level DEBUG and INFO
    debug {
      events "started", "passed", "skipped", "failed", "standardOut", "standardError"
      exceptionFormat "full"
    }
    info.events = debug.events
    info.exceptionFormat = debug.exceptionFormat

    afterSuite { desc, result ->
      if (!desc.parent) { // will match the outermost suite
        def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
        def startItem = '|  ', endItem = '  |'
        def repeatLength = startItem.length() + output.length() + endItem.length()
        println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
      }
    }
  }
}